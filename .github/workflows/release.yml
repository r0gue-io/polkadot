name: release

on:
  workflow_dispatch:
    inputs:
      release: # e.g. 'polkadot-v1.12.0'
        description: Polkadot release tag
        required: true
      rust: # e.g. '1.77.0'
        description: Rust version
        required: true
      title: # e.g. 'Polkadot v1.12.0'
        description: Release title
        required: true

jobs:
  build:
    name: ${{ matrix.package.name }} (${{ matrix.platform.target }})
    runs-on: ${{ matrix.platform.os }}
    permissions:
      contents: write
    strategy:
      matrix:
        package:
          - name: polkadot
            projects:
              - polkadot
            binaries:
              - polkadot
              - polkadot-execute-worker
              - polkadot-prepare-worker
          - name: polkadot-parachain
            projects:
              - polkadot-parachain-bin
            binaries:
              - polkadot-parachain
          - name: frame-omni-bencher
            projects:
              - frame-omni-bencher
            binaries:
              - frame-omni-bencher
          - name: polkadot-omni-node
            projects:
              - polkadot-omni-node
              - staging-chain-spec-builder
            binaries:
              - polkadot-omni-node
              - chain-spec-builder
        platform:
          # Linux
          - os: ubuntu-24.04
            target: aarch64-unknown-linux-gnu
          - os: ubuntu-24.04
            target: x86_64-unknown-linux-gnu
          # macOS
          - os: macos-15
            target: aarch64-apple-darwin
          - os: macos-15
            target: x86_64-apple-darwin
    env:
      RUSTFLAGS: "${{ matrix.platform.cpu != '' && format('-C target-cpu={0}', matrix.platform.cpu) || '' }} ${{ matrix.platform.target == 'aarch64-unknown-linux-gnu' && '-C linker=aarch64-linux-gnu-gcc' || '' }}"
      path: "target/${{ matrix.platform.target }}/production"
      archive: "${{ matrix.package.name }}-${{ matrix.platform.target }}${{ matrix.platform.cpu != '' && format('-{0}', matrix.platform.cpu) || '' }}.tar.gz"
      sha: ${{ contains(matrix.platform.target, 'apple') && 'shasum -a 256' || 'sha256sum' }}
    steps:
      - name: Free up space
        shell: bash
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf "/usr/local/share/boost"
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"

      # Clone and checkout release
      - id: clone
        name: Clone release
        run: |
          git clone --branch ${{ github.event.inputs.release }} --depth 1 https://github.com/paritytech/polkadot-sdk
          cd polkadot-sdk
          echo "rev=$(git rev-parse --short HEAD | tr -d '\n')" >> "$GITHUB_OUTPUT"

      # Install packages
      - name: Install packages (Linux)
        if: contains(matrix.platform.target, 'linux')
        run: |
          sudo apt-get update -y
          sudo apt-get install -y --fix-missing protobuf-compiler ${{ contains(matrix.platform.target, 'aarch64') && 'crossbuild-essential-arm64' || '' }}
      - name: Install packages (macOS)
        if: contains(matrix.platform.target, 'apple')
        run: brew install protobuf

      # Configure Rust toolchain
      - name: Set Rust version
        run: |
          rustup default ${{ github.event.inputs.rust }}
          rustup component add rust-src
          rustup target add ${{ matrix.platform.target }} wasm32-unknown-unknown

      # Build and package
      - name: Build ${{ matrix.package.name }}
        working-directory: polkadot-sdk
        run: |
          set -xeuo pipefail
          projects=()
          for pkg in ${{ join(matrix.package.projects, ' ') }}; do
            projects+=("-p" "$pkg")
          done
          if [[ "${{ matrix.package.name }}" == "polkadot" || "${{ matrix.package.name }}" == "polkadot-parachain" ]]; then
            cargo b --profile=production "${projects[@]}" -F fast-runtime --target ${{ matrix.platform.target }}
          else
            cargo b --profile=production "${projects[@]}" --target ${{ matrix.platform.target }}
          fi

      - name: Package ${{ matrix.package.name }}
        working-directory: polkadot-sdk/${{ env.path }}
        run: |
          set -xeuo pipefail
          binaries=()
          for bin in ${{ join(matrix.package.binaries, ' ') }}; do
            binaries+=("$bin" "${bin}.sha256")
            ${{ env.sha }} "$bin" > "${bin}.sha256"
          done
          tar -czf ${{ env.archive }} "${binaries[@]}"

      # Add package to workflow
      - name: Upload archives
        uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ matrix.package.name }}-${{ matrix.platform.target }}
          path: |
            polkadot-sdk/${{ env.path }}/${{ env.archive }}

      # Add package to release
      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          name: ${{ github.event.inputs.title }}
          tag_name: ${{ github.event.inputs.release }}
          body: "Release generated from release tag `${{ github.event.inputs.release }}` (commit: `${{ steps.clone.outputs.rev }}`) and using Rust `${{ github.event.inputs.rust }}`.\n\nPlease see https://github.com/paritytech/polkadot-sdk/releases/tag/${{ github.event.inputs.release }} for release notes."
          prerelease: true
          files: | 
            polkadot-sdk/${{ env.path }}/${{ env.archive }}
